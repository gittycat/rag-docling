import os
from typing import List, Dict, Optional
import chromadb
from core_logic.embeddings import get_embedding_function

COLLECTION_NAME = "documents"

def get_chroma_client():
    """Get ChromaDB HTTP client"""
    chroma_url = os.getenv("CHROMADB_URL", "http://chromadb:8000")
    return chromadb.HttpClient(host=chroma_url.replace("http://", "").split(":")[0],
                                port=int(chroma_url.split(":")[-1]))

def get_or_create_collection():
    """
    Get or create the documents collection with Ollama embedding function.
    The embedding function will automatically generate embeddings when documents are added.
    """
    client = get_chroma_client()
    embedding_function = get_embedding_function()

    collection = client.get_or_create_collection(
        name=COLLECTION_NAME,
        embedding_function=embedding_function
    )

    return collection

def add_documents(collection, documents: List[str], metadatas: List[Dict], ids: List[str]):
    """
    Add documents to ChromaDB collection.
    Embeddings are automatically generated by the collection's embedding function.

    Args:
        collection: ChromaDB collection
        documents: List of document texts
        metadatas: List of metadata dicts
        ids: List of unique document IDs
    """
    collection.add(
        documents=documents,
        metadatas=metadatas,
        ids=ids
    )

def query_documents(collection, query_text: str, n_results: int = 5) -> Dict:
    """
    Query the collection for similar documents.
    Query embedding is automatically generated by the collection's embedding function.

    Args:
        collection: ChromaDB collection
        query_text: Search query text
        n_results: Number of results to return

    Returns:
        Dictionary with documents, metadatas, distances, and ids
    """
    results = collection.query(
        query_texts=[query_text],
        n_results=n_results
    )

    return results

def delete_document(collection, document_id: str):
    """
    Delete a document from the collection by ID.

    Args:
        collection: ChromaDB collection
        document_id: Unique document ID to delete
    """
    collection.delete(ids=[document_id])

def list_documents(collection) -> List[Dict]:
    """
    List all documents in the collection.
    Groups chunks by document_id and counts them.

    Returns:
        List of dictionaries with id, metadata, and chunk count for each document
    """
    results = collection.get()

    # Group chunks by document_id
    doc_map = {}
    for i, chunk_id in enumerate(results['ids']):
        metadata = results['metadatas'][i] if i < len(results['metadatas']) else {}
        doc_id = metadata.get('document_id', chunk_id)

        if doc_id not in doc_map:
            doc_map[doc_id] = {
                'id': doc_id,
                'file_name': metadata.get('file_name', 'Unknown'),
                'file_type': metadata.get('file_type', ''),
                'path': metadata.get('path', ''),
                'chunks': 0
            }

        doc_map[doc_id]['chunks'] += 1

    return list(doc_map.values())
